var documenterSearchIndex = {"docs":
[{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"EditURL = \"https://github.com/FourierFlows/OscillatoryFlows.jl/blob/master/examples/OneDWaveEquation/two_gaussians.jl\"","category":"page"},{"location":"generated/two_gaussians/#Two-Gaussians-1","page":"Two Gaussians","title":"Two Gaussians","text":"","category":"section"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"In this example, a Gaussian initial condition is let loose and two gaussians that propagate in either direction emerge.","category":"page"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"using\n    OscillatoryFlows.OneDWaveEquation,\n    Printf,\n    Plots","category":"page"},{"location":"generated/two_gaussians/#Build-the-problem-1","page":"Two Gaussians","title":"Build the problem","text":"","category":"section"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"problem = Problem(; nx=256, Lx=2π, c=1, β=0, dt=0.01)\n\nnothing # hide","category":"page"},{"location":"generated/two_gaussians/#A-Gaussian-initial-condition-1","page":"Two Gaussians","title":"A Gaussian initial condition","text":"","category":"section"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"This initial condition is a Gaussian with variance 110.","category":"page"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"σ = 1/10 # variance\nξ₀(x) = exp( - x^2 / (2σ^2) )\n\nset_ξ!(problem, ξ₀)\n\nfunction makeplot(problem)\n    p = plot(problem.grid.x, problem.vars.ξ,\n          ylims = (-0.5, 1.1),\n          title = @sprintf(\"Two Gaussians, t = %.2f\", problem.clock.t),\n         xlabel = \"x\",\n         ylabel = \"ξ\",\n         legend = false)\n    return p\nend\n\nnothing # hide","category":"page"},{"location":"generated/two_gaussians/#Run,-and-animate-the-results-1","page":"Two Gaussians","title":"Run, and animate the results","text":"","category":"section"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"anim = @animate for i = 1:51\n    makeplot(problem)   # plot before stepforward!() to get frame with initial condition\n    stepforward!(problem, 2)\n    updatevars!(problem)\nend\n\nmp4(anim, \"two_gaussians.mp4\", fps=12)","category":"page"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"","category":"page"},{"location":"generated/two_gaussians/#","page":"Two Gaussians","title":"Two Gaussians","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/onedwaveequation/#OneDWaveEquation-1","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"","category":"section"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"This module solves the one-dimensional wave equation:","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"xi_tt - c^2 xi_xx = - beta xi_t","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"where xi is the displacement associated with the wave field, c is the wave speed, and beta is a damping rate.","category":"page"},{"location":"modules/onedwaveequation/#Numerical-formulation-1","page":"OneDWaveEquation","title":"Numerical formulation","text":"","category":"section"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"Before solving the wave equation numerically, we 'diagonalize' the dispersion term by defining","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"chi = u + c xi_x 1ex\npsi = u - c xi_x","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"To derive equations for chi and psi, we start with a first-order formulation of the wave equation,","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"xi_t = u 1ex\nu_t = c^2 xi_xx - beta u","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"where u is the velocity, or the rate of change of the displacement. We find","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"chi_t - c chi_x = - beta u 1ex\npsi_t + c psi_x = - beta u","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"Taking the Fourier transform, we have","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"hat chi = hat u + mathrmi c k hat xi 1ex\nhat psi = hat u - mathrmi c k hat xi ","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"We define","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"sigma equiv c k","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"and note that","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"  hat u = frac12 left ( hat chi + hat psi right ) 1ex\nhat xi = fracmathrmi2 sigma left ( hat psi - hat chi right )","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"to obtain","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"hat chi_t - mathrmi sigma hat chi = - fracbeta2 left ( hat chi + hat psi right ) 1ex\nhat psi_t + mathrmi sigma hat psi = - fracbeta2 left ( hat chi + hat psi right )","category":"page"},{"location":"modules/onedwaveequation/#","page":"OneDWaveEquation","title":"OneDWaveEquation","text":"Using this form allows us to use the ETDRK4 time-stepper to solve the oscillatory part of this system exactly.","category":"page"},{"location":"#OscillatoryFlows.jl-Documentation-1","page":"Home","title":"OscillatoryFlows.jl Documentation","text":"","category":"section"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"OscillatoryFlows.jl is a collection of modules that use Fourier-based pseudospectral methods to solve various wave equations that occur in fluid dynamics and other disciplines.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"OscillatoryFlows.jl leverages the  FourierFlows.jl framework.","category":"page"},{"location":"#Developers-1","page":"Home","title":"Developers","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"OscillatoryFlows is currently being developed by Gregory L. Wagner and Navid C. Constantinou.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"EditURL = \"https://github.com/FourierFlows/OscillatoryFlows.jl/blob/master/examples/OneDWaveEquation/standing_and_propagating_waves.jl\"","category":"page"},{"location":"generated/standing_and_propagating_waves/#Standing-and-propagating-waves-1","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"","category":"section"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"In this example, we illustrate the motion of both standing and propagating waves using OscillatoryFlows' OneDWaveEquation module.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"using\n    OscillatoryFlows.OneDWaveEquation,\n    Printf,\n    Plots","category":"page"},{"location":"generated/standing_and_propagating_waves/#Parameters-1","page":"Standing and propagating waves","title":"Parameters","text":"","category":"section"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"Here, we choose a domain size, numerical resolution, wave phase speed, and the time-step.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"Lx = 2π     # domain length\nnx = 256    # number of grid points\n c = 1      # wave phase speed\ndt = 0.01   # time-step\n β = 0      # linear drag coefficient\n\nnothing # hide","category":"page"},{"location":"generated/standing_and_propagating_waves/#Set-up-two-problems-1","page":"Standing and propagating waves","title":"Set up two problems","text":"","category":"section"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"We set up two problems: one to simulate a standing wave, and another to simulate a propagating wave.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"   standing_problem = Problem(; nx=nx, Lx=Lx, c=c, β=β, dt=dt)\npropagating_problem = Problem(; nx=nx, Lx=Lx, c=c, β=β, dt=dt)\n\nnothing # hide","category":"page"},{"location":"generated/standing_and_propagating_waves/#Initial-conditions-1","page":"Standing and propagating waves","title":"Initial conditions","text":"","category":"section"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"For our initial conditions we use a sinusoid with wavenumber=8.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"The initial velocity for the standing wave is zero.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"We determine the initial velocity for the propagating wave using the dispersion relation. For t > 0, the propagating wave solution has the displacement","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"$ ξ(x, t) = \\cos(\\,k (x - c t)\\,)\\, . $","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"This implies that the velocity of the standing wave, u = _t ξ, is","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"$ u(x, t) = k c \\sin(\\, k (x - c t)\\,)\\, .$","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"Taking t=0 determines the initial conditions, ξ(x t=0) and u(x t=0).","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"# Wavenumber\nk = 8\n\n# Functions that define the initial conditions\nξ₀(x) = cos(k * x)\nu₀(x) = k * c * sin(k * x)\n\n# Set standing wave initial condition\nset_ξ!(standing_problem, ξ₀)\n\n# Set propagating wave initial condition\nset_ξ!(propagating_problem, ξ₀)\nset_u!(propagating_problem, u₀)","category":"page"},{"location":"generated/standing_and_propagating_waves/#Time-step-and-animate-1","page":"Standing and propagating waves","title":"Time-step and animate","text":"","category":"section"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"We're finally ready to time-step our problem forward. Along the way, we create an animation to visualize the solution.","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"anim = @animate for i = 1:51\n    standing_plot =\n        plot(standing_problem.grid.x, standing_problem.vars.ξ,\n             title = @sprintf(\"Standing wave, t = %.2f\", standing_problem.clock.t),\n             xlabel = \"x\", ylabel = \"ξ\", ylims = (-1, 1))\n\n    propagating_plot =\n        plot(propagating_problem.grid.x, propagating_problem.vars.ξ,\n             title = @sprintf(\"Propagating wave, t = %.2f \", standing_problem.clock.t),\n             xlabel = \"x\", ylabel = \"ξ\", ylims = (-1, 1))\n\n    plot(standing_plot, propagating_plot, layout = (2, 1), legend = false) # plot before stepforward!() to get frame with initial condition\n\n    stepforward!(standing_problem, 2)\n    stepforward!(propagating_problem, 2)\n\n    updatevars!(standing_problem)\n    updatevars!(propagating_problem)\nend\n\nmp4(anim, \"standing_propagating_waves.mp4\", fps=12) # hide","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"","category":"page"},{"location":"generated/standing_and_propagating_waves/#","page":"Standing and propagating waves","title":"Standing and propagating waves","text":"This page was generated using Literate.jl.","category":"page"},{"location":"modules/onedsurfacewaves/#OneDSurfaceWaves-1","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"","category":"section"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"This module solves the potential flow equations in x z beneath a free surface at z = s(x t). The numerical method uses a Taylor expansion of the boundary condition  at the free surface due to  Dommermuth and Yue (1987).","category":"page"},{"location":"modules/onedsurfacewaves/#Governing-equations-1","page":"OneDSurfaceWaves","title":"Governing equations","text":"","category":"section"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"The two prognostic variables are the surface elevation, s(x t), and the surface potential Phi(x t) defined via","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"Phi(x t) equiv phi(x z=s(x t) t)  ","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"The velocity and pressure fields are related to the velocity potential phi via","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"bmu equiv boldsymbolnabla phi  text and  p equiv - phi_t - frac12 left  boldsymbolnabla phi right ^2  ","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"The surface elevation obeys","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"s_t = left ( 1 + s_x^2 right ) phi_z  _z=s - Phi_x s_x  ","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"where phi_z  _z=s is the vertical gradient of the velocity potential –- the vertical velocity – at z=s.","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"The dynamic boundary condition on pressure at the surface of the ocean yields an evolution equation for Phi:","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"Phi_t = - g s - frac12 Phi^2_x + frac12 left ( 1 + s_x^2 right ) phi^2_z  _z=s - varpi","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"where varpi is the atmospheric pressure at z=s.","category":"page"},{"location":"modules/onedsurfacewaves/#Algorithm-to-obtain-\\phi_z-\\,-_{zs}-1","page":"OneDSurfaceWaves","title":"Algorithm to obtain phi_z  _z=s","text":"","category":"section"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"The main difficulty is finding the vertical velocity at the surface, phi_z  _z=s.","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"For this we introduce a perturbation expansion of phi at z=s,","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"phi(x z t) = sum_m=1^M phi_m(x z t)  ","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"where each phi_m is smaller than phi_m-1 by O(epsilon), where epsilon is the surface slope (which must be small for the validity of this algorithm).","category":"page"},{"location":"modules/onedsurfacewaves/#","page":"OneDSurfaceWaves","title":"OneDSurfaceWaves","text":"beginaligned\nPhi(x t)  = phi _z=s \n            approx big    underbracephi_1_O(epsilon)\n                            + underbracephi_2 + s phi_1z_O left ( epsilon^2 right )\n                            + underbracephi_3 + s phi_2z + tfrac12 s^2 phi_1zz_O left ( epsilon^3 right ) + dots  big _z=0 \n            = sum_m=1^M  underbrace sum_n=0^M-m fracs^nn partial_z^n phi_m _z=0 _textall terms  phi_m + O left ( epsilon^M+1 right )   \n            = sum_m=1^M  underbrace sum_n=0^m-1 fracs^nn partial_z^n phi_m-n _z=0 _textall terms  O(epsilon^m)  + O left ( epsilon^M+1 right )   \nendaligned","category":"page"}]
}
